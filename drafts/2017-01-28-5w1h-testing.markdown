---
title: 5W1H of Testing
summary: A semi-transcript of a talk on how, when, where, why, who and what with regard to testing.
---

Our industry almost universally agrees that writing tests for software is important. I find that while people talk a lot about writing tests, not that many end up writing them regularly.

I think exploring the reasoning behind testing is useful to demonstrate the things testing can and cannot help us with. 

# Why

## Software is built from decisions...

![coffee in, code out](https://image.spreadshirtmedia.com/image-server/v1/products/1005155751/views/4,width=500,height=500,appearanceId=70,version=1428906441/coffee-in-code-out-mug-contrast-coffee-mug.webp "coffee in, code out")

Depending on the kind of software company you work for, your exposure to the stakeholders of your project. Sometimes the stakeholders are your client, sometimes your users, sometimes both. At its core, software has to deliver value to the stakeholders in order to be useful.

At times it might seem like your project manager drives the direction of a project, the decisions that drive the implementation are our responsibility. The representation of software is code, the atomic units that make up a program are these decisions.

### Requirements change over time

With every piece of work we undertake, we add new decisions into the history of the project. Sometimes this requires removing or changing existing functionality. 

### Developers change over time as well

The natural lifecycle of a project involves a natural cadence of developers joinging the team, and leaving it. 

### Code (with or without comments) is insufficient to relay this information

## It's important that these decisions are "correct"

### JavaScript doesn't help us document intentions

### JavaScript has no types

## Tests can help us preserve this information 

### Tests protect the decisions you makers

### Tests ensure those decisions are still valuable

### Tests give some indication on how your code should be used

# When

## During task development

## Tech Debt elimination

# Where

## Co-Located in the codebase

## Run during development

## Run in CI before merge and deploy

# What

## Testing Pyramid

### Unit Tests

### Integration Tests

### E2E Tests

## Public API

## Private API

## UI

### Snapshot Testing

# How

## Methodology

### Test Driven Development

### TDD is Dead

## Error Driven Development

### QA Lifecycle

### Production error lifecycle

### Tech Debt cycle

# Who

## CTO

### Ensure company culture encourages writing tests

### Educate company on why testing is important

## Tech Lead

### Prioritise testing during iterations

### Help guide newer developers on how to write useful tests 

## Developer

### Commit to shipping tests along with code
